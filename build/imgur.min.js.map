{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","request","this","extend","key","obj","i","result","arguments","length","hasOwnProperty","utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","body","undefined","bearer","additionalHeaders","imgurAPICall","options","forEach","option","Error","authToken","send","set","promise","endpoint","bind","imageEndpoint","get","hash","albumEndpoint","oauth2Endpoint","responseType","resType","queryString","join","refresh","refreshToken","clientSecret","topicsEndpoint","topicId","sort","page","requestPath","getDefaults","postOptions","galleryPostEndpoint","REASON_DOES_NOT_BELONG_ON_IMGUR","report","reason","_handleVote","voteType","upvote","downvote","favorite","isAlbum","postType","comments","galleryEndpoint","section","showViral","post","commentEndpoint","commentId","deleteComment","submitComment","params","console","log","submitReply","clientKey","bearerKey","setUtil","value","getUtil","image","album","oauth2","topics","gallery","comment"],"mappings":"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","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent-bluebird-promise')) :\n  typeof define === 'function' && define.amd ? define(['superagent-bluebird-promise'], factory) :\n  global.imgur = factory(global.request)\n}(this, function (request) { 'use strict';\n\n  var utils = {\n      API_URL: 'https://api.imgur.com',\n      API_VERSION: '3',\n      CLIENT_ID: '',\n      buildOptions: (apiUrl, path, method, body = {}) => {\n          return { apiUrl, path, method, body };\n      },\n      bearer: '',\n      additionalHeaders: {}\n  };\n\n  var imgurAPICall = function(options) {\n      ['method', 'apiUrl', 'path', 'body'].forEach(option => {\n          if (!options[option]) {\n              throw new Error(`${option} must be specified`);\n          }\n      });\n\n      let authToken = `Client-ID ${utils.CLIENT_ID}`;\n\n      if(utils.bearer) {\n          authToken = `Bearer ${utils.bearer}`;\n      }\n\n      return request[options.method](`${options.apiUrl}/${options.path}`)\n          .send(options.body)\n          .set('Authorization', authToken)\n          .set(utils.additionalHeaders)\n          .promise();\n  };\n\n  var endpoint = function(options) {\n      options.imgurAPICall = imgurAPICall.bind(options);\n      options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\n\n      return options;\n  }\n\n  var imageEndpoint = endpoint({\n      path: 'image',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(hash) {\n          const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var albumEndpoint = endpoint({\n      path: 'album',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(hash) {\n          const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var oauth2Endpoint = endpoint({\n      path: 'oauth2',\n      apiUrl: utils.API_URL,\n      get(responseType) {\n          const resType = responseType || 'token';\n          const queryString = '?' + [\n              `response_type=${resType}`,\n              `client_id=${utils.CLIENT_ID}`\n        ].join('&');\n\n          const path = `${this.path}/authorize${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      refresh(refreshToken, clientSecret) {\n          const queryString = '?' + [\n              `refresh_token=${refreshToken}`,\n              `client_id=${utils.CLIENT_ID}`,\n              `client_secret=${clientSecret}`,\n              'grant_type=refresh_token'\n          ].join('&');\n\n          const path = `${this.path}/token${queryString}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var topicsEndpoint = endpoint({\n      path: 'topics',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(topicId, sort='viral', page=0) {\n          const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      getDefaults() {\n          const requestPath = `${this.path}/defaults`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      }\n  });\n\n  const postOptions = {\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\n};\n\n  function extend() {\n    var key, obj, result = {}, i;\n    for (i = 0; i <= arguments.length; i++) {\n      obj = arguments[i];\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          result[key] = obj[key];\n        } else {\n        }\n      }\n    }\n    return result;\n  }\n\n  var galleryPostEndpoint = endpoint(extend({}, postOptions, {\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(hash) {\n          const path = `${this.path}/${hash}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      report(hash, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${hash}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      _handleVote(hash, voteType) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          const path = `${this.path}/${hash}/vote/${voteType}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(hash) {\n          return this._handleVote(hash, 'up');\n      },\n      downvote(hash) {\n          return this._handleVote(hash, 'down');\n      },\n      favorite(hash, isAlbum) {\n          if(!hash) { throw new Error('hash must be specified'); }\n\n          if(isAlbum === undefined || typeof(isAlbum) !== 'boolean') {\n              throw new Error('isAlbum with type boolean must be specified');\n          }\n\n          const postType = isAlbum ? 'album' : 'image';\n          //doesn't use gallery path because it could be a non gallery item\n          const path = `${postType}/${hash}/favorite`;\n          const options =  utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      comments: endpoint(extend({}, postOptions, {\n          get(hash, sort='best') {\n              const path = `${this.path}/${hash}/comments/${sort}`;\n              const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n              return this.imgurAPICall(options);\n          }\n      }))\n  }));\n\n  var galleryEndpoint = endpoint({\n      path: 'gallery',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      get(section='hot', sort='viral', page=0, showViral=true) {\n          const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\n          const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      post: galleryPostEndpoint\n  });\n\n  var commentEndpoint = endpoint({\n      path: 'comment',\n      apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\n      REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\n      get(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'get');\n\n          return this.imgurAPICall(options);\n      },\n      downvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/down`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      upvote(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}/vote/up`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post');\n\n          return this.imgurAPICall(options);\n      },\n      report(commentId, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          if(typeof reason !== 'number') {\n              throw new Error('the reason must be an integer');\n          }\n\n          const path = `${this.path}/${commentId}/report`;\n          const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\n\n          return this.imgurAPICall(options);\n      },\n      deleteComment(commentId) {\n          if(!commentId) { throw new Error('commentId must be specified'); }\n\n          const path = `${this.path}/${commentId}`;\n          const options = utils.buildOptions(this.apiUrl, path, 'del');\n\n          return this.imgurAPICall(options);\n      },\n      submitComment(params) {\n          ['image_id', 'comment'].forEach(option => {\n              console.log(!params[option]);\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      },\n      submitReply(params) {\n          ['image_id', 'comment', 'parent_id'].forEach(option => {\n              if (!params[option]) {\n                  throw new Error(`${option} must be specified`);\n              }\n          });\n\n          const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\n          return this.imgurAPICall(options);\n      }\n  });\n\n  var imgur = function(clientKey, bearerKey) {\n      let setUtil = function(key, value) {\n          utils[key] = value;\n      };\n\n      let getUtil = function(key) {\n          return utils[key];\n      };\n\n      if (!clientKey) {\n          throw new Error('Client Key required to initialize imgur client');\n      }\n\n      setUtil('CLIENT_ID', clientKey);\n\n      if(bearerKey) {\n          setUtil('bearer', bearerKey);\n      }\n\n      return {\n          imgurAPICall,\n          CLIENT_ID: clientKey,\n          image: imageEndpoint,\n          album: albumEndpoint,\n          oauth2: oauth2Endpoint,\n          topics: topicsEndpoint,\n          gallery: galleryEndpoint,\n          comment: commentEndpoint,\n          setUtil,\n          getUtil\n      };\n  }\n\n  return imgur;\n\n}));\n",null],"sourceRoot":"/source/"}